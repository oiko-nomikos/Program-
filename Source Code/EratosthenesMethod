class EratosthenesMethod {
public:
    // NOTE: Will not work for large 'end' due to memory/time limits.
    std::vector<uint64_t> sievePrimes(uint64_t start, uint64_t end) {
        if (start < 2) start = 2;
        if (end < start) return {};

        // Check range is not too large (simple safety)
        if (end - start > 18'446'744'073'709'551'600) {
            std::cerr << "Range too large for sieve. Aborting.\n";
            return {};
        }

        std::vector<bool> is_prime(end + 1, true);
        is_prime[0] = is_prime[1] = false;

        for (uint64_t p = 2; p * p <= end; ++p) {
            if (is_prime[p]) {
                for (uint64_t multiple = p * p; multiple <= end; multiple += p)
                    is_prime[multiple] = false;
            }
        }

        std::vector<uint64_t> primes;
        for (uint64_t i = start; i <= end; ++i) {
            if (is_prime[i])
                primes.push_back(i);
        }
        return primes;
    }
};

int main() {
    EratosthenesMethod method;

    int startBits = 24;  // Starting bit count
    int endBits = 25;    // Ending bit count

    if (startBits < 1 || endBits < startBits || endBits > 64) {
        std::cerr << "Invalid bit range!\n";
        return 1;
    }

    uint64_t start = uint64_t(1) << (startBits - 1);          // smallest number with startBits bits
    uint64_t end = (uint64_t(1) << endBits) - 1;              // largest number with endBits bits

    std::cout << "Finding primes from " << start << " to " << end << "...\n";

    auto primes = method.sievePrimes(start, end);

    for (auto prime : primes)
        std::cout << prime << "\n";

    std::cout << "Found " << primes.size() << " primes.\n";

    return 0;
}
