class RSA {
public:
    int P1 = 53;
    int P2 = 59;
    int n = P1 * P2;
    int totient = (P1 - 1) * (P2 - 1);
    int e = 3;
    int d = (2 * totient + 1) / e;  

    void showKeys() {
        std::cout << "P1 = " << P1 << "\n";
        std::cout << "P2 = " << P2 << "\n";
        std::cout << "n = " << n << "\n";
        std::cout << "totient = " << totient << "\n";
        std::cout << "e (public exponent) = " << e << "\n";
        std::cout << "d (private exponent) = " << d << "\n";
        std::cout << "Public key (n, e) = (" << n << ", " << e << ")\n";
        std::cout << "Private key (n, d) = (" << n << ", " << d << ")\n";
    }
    
    std::pair<int, int> getPublicKey() const {
        return {n, e};
    }

    std::vector<int> encrypt(const std::string& plaintext) {
        std::vector<int> encrypted;
        for (char ch : plaintext) {
            int m = static_cast<int>(ch);
            int c = static_cast<int>(std::pow(m, e)) % n;
            encrypted.push_back(c);
        }
        return encrypted;
    }

    std::string decrypt(const std::vector<int>& ciphertext) {
        std::string decrypted;
        for (int c : ciphertext) {
            int m = static_cast<int>(std::pow(c, d)) % n;
            decrypted += static_cast<char>(m);
        }
        return decrypted;
    }

    // Modular exponentiation
    static unsigned long long modExp(unsigned long long base, unsigned long long exp, unsigned long long mod) {
        unsigned long long result = 1;
        base %= mod;
        while (exp > 0) {
            if (exp & 1) result = (result * base) % mod;
            base = (base * base) % mod;
            exp >>= 1;
        }
        return result;
    }

    // Convert hex to integer (64-bit truncation for small n)
    static unsigned long long hexToInt64(const std::string& hex) {
        return std::stoull(hex.substr(0, 16), nullptr, 16);
    }

    // Sign a message: hash it, then encrypt the hash with private key (d)
    unsigned long long sign(const std::string& message) {
        SHA256 sha;
        sha.update(message);
        std::string hashHex = sha.digest();
        unsigned long long hashInt = hexToInt64(hashHex);
        return modExp(hashInt, d, n);
    }

    // Verify a signature: hash message, decrypt signature using public key (e), compare hashes
    bool verify(const std::string& message, unsigned long long signature) {
        SHA256 sha;
        sha.update(message);
        std::string expectedHashHex = sha.digest();
        unsigned long long expectedHashInt = hexToInt64(expectedHashHex);
        unsigned long long verifiedHash = modExp(signature, e, n);
        return verifiedHash == expectedHashInt;
    }
};
