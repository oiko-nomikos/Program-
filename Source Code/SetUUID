class SetUUID {
public:
    void run() {
        message();  // Correct function call
    }

private:
    GlobalDatabase globalDB;
    GenerateUUID uuidGenerator;
    RSA rsa;
    SHA256 sha;
    
    void message() {
        rsa.showKeys();

        // Step 1: Create UUID
        auto [uuid, _] = uuidGenerator.generateUUID();

        // Step 2: Create Message
        std::string message = uuid;

        // Step 3: Create Public Key (unsigned long long)
        auto [m, e] = rsa.getPublicKey();
        std::cout << "\nPublic key: (" << m << ", " << e << ")\n";

        // Step 4: Sign Encrypted Message
        auto signature = rsa.sign(message);

        // Step 5: Return Message and Signature 
        std::cout << "\nMessage: " << message << "\n";
        std::cout << "Signature: " << signature << "\n";

        // Step 6: Verify Message
        bool valid = rsa.verify(message, signature);
        std::cout << "Verification result: " << (valid ? "Valid" : "Invalid") << "\n";

        // Step 7: Create combined string for hashing
        std::ostringstream oss;
        oss << uuid << "|" << message << "|" << signature << "|" << m << "|" << e;
        std::string combined = oss.str();

        // Step 8: Hash
        sha.update(combined);
        std::string hash = sha.digest();

        // Step 9: Store in database â€” pass m and e directly (unsigned long long)
        globalDB.addNextDataset(uuid, message, std::to_string(signature), std::to_string(m), std::to_string(e), "127.0.0.1", "8080", hash);

        // Step 10: Output
        const auto* data = globalDB.getDataset(uuid);
        if (data) {
            std::cout << "\n--- Dataset Information ---\n";
            std::cout << "UUID: " << data->uuid << "\n";
            std::cout << "Message: " << data->message << "\n";
            std::cout << "Signature: " << data->signature << "\n";
            std::cout << "Public Key (n): " << data->modulus << "\n";
            std::cout << "Public Key (e): " << data->exponent << "\n";
            std::cout << "IP: " << data->ipAddress << ", Port: " << data->portNumber << "\n";
            std::cout << "Hash: " << data->hash << "\n";
        }
    }
};
